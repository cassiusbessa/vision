// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package data

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPost = `-- name: CreatePost :one
INSERT INTO posts (id, project_id, author_id, title, content, repo_link, demo_link, post_image, created_at, updated_at) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10) RETURNING id, project_id, author_id, title, content, repo_link, demo_link, post_image, like_count, comment_count, created_at, updated_at
`

type CreatePostParams struct {
	ID        pgtype.UUID
	ProjectID pgtype.UUID
	AuthorID  pgtype.UUID
	Title     string
	Content   string
	RepoLink  pgtype.Text
	DemoLink  pgtype.Text
	PostImage pgtype.Text
	CreatedAt pgtype.Timestamptz
	UpdatedAt pgtype.Timestamptz
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRow(ctx, createPost,
		arg.ID,
		arg.ProjectID,
		arg.AuthorID,
		arg.Title,
		arg.Content,
		arg.RepoLink,
		arg.DemoLink,
		arg.PostImage,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.AuthorID,
		&i.Title,
		&i.Content,
		&i.RepoLink,
		&i.DemoLink,
		&i.PostImage,
		&i.LikeCount,
		&i.CommentCount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOrderedPosts = `-- name: GetOrderedPosts :many
SELECT id, project_id, author_id, title, content, repo_link, demo_link, post_image, like_count, comment_count, created_at, updated_at FROM posts ORDER BY created_at DESC LIMIT $1 OFFSET $2
`

type GetOrderedPostsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetOrderedPosts(ctx context.Context, arg GetOrderedPostsParams) ([]Post, error) {
	rows, err := q.db.Query(ctx, getOrderedPosts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.AuthorID,
			&i.Title,
			&i.Content,
			&i.RepoLink,
			&i.DemoLink,
			&i.PostImage,
			&i.LikeCount,
			&i.CommentCount,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostByID = `-- name: GetPostByID :one
SELECT id, project_id, author_id, title, content, repo_link, demo_link, post_image, like_count, comment_count, created_at, updated_at FROM posts WHERE id = $1
`

func (q *Queries) GetPostByID(ctx context.Context, id pgtype.UUID) (Post, error) {
	row := q.db.QueryRow(ctx, getPostByID, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.AuthorID,
		&i.Title,
		&i.Content,
		&i.RepoLink,
		&i.DemoLink,
		&i.PostImage,
		&i.LikeCount,
		&i.CommentCount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
